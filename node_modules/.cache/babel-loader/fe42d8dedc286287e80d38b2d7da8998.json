{"ast":null,"code":"import _toConsumableArray from \"/home/jvidal/Projects/multiple-inputs/node_modules/@babel/runtime/helpers/esm/toConsumableArray\";\nimport _classCallCheck from \"/home/jvidal/Projects/multiple-inputs/node_modules/@babel/runtime/helpers/esm/classCallCheck\";\nimport _createClass from \"/home/jvidal/Projects/multiple-inputs/node_modules/@babel/runtime/helpers/esm/createClass\";\nimport _possibleConstructorReturn from \"/home/jvidal/Projects/multiple-inputs/node_modules/@babel/runtime/helpers/esm/possibleConstructorReturn\";\nimport _getPrototypeOf from \"/home/jvidal/Projects/multiple-inputs/node_modules/@babel/runtime/helpers/esm/getPrototypeOf\";\nimport _inherits from \"/home/jvidal/Projects/multiple-inputs/node_modules/@babel/runtime/helpers/esm/inherits\";\nvar _jsxFileName = \"/home/jvidal/Projects/multiple-inputs/src/components/MultiInput/MultiInput.jsx\";\nimport React, { Component } from 'react';\nimport PropTypes from 'prop-types';\n\nvar MultiInput =\n/*#__PURE__*/\nfunction (_Component) {\n  _inherits(MultiInput, _Component);\n\n  function MultiInput(props) {\n    var _this;\n\n    _classCallCheck(this, MultiInput);\n\n    _this = _possibleConstructorReturn(this, _getPrototypeOf(MultiInput).call(this, props));\n\n    _this.handleSubmit = function (e) {\n      e.preventDefault();\n    };\n\n    _this.handleChange = function (e) {\n      var inputs = _toConsumableArray(_this.state.inputs);\n\n      inputs[e.target.dataset.id] = e.target.value;\n\n      _this.setState({\n        inputs: inputs\n      }, console.log(_this.state.inputs));\n    };\n\n    _this.handleInputTyping = function (e) {\n      var index = e.target.dataset.id === 0 ? 1 : e.target.dataset.id;\n\n      if (_this.state.inputs.length <= index) {\n        _this.setState(function (prevState) {\n          return {\n            inputs: _toConsumableArray(prevState.inputs).concat([\"\"])\n          };\n        });\n      }\n    };\n\n    _this.removeInput = function (e) {};\n\n    if (props.inputs.length === 0) {\n      props.inputs.push(\"\");\n    }\n\n    _this.state = {\n      inputs: props.inputs\n    };\n    return _this;\n  }\n\n  _createClass(MultiInput, [{\n    key: \"render\",\n    value: function render() {\n      var _this2 = this;\n\n      return React.createElement(\"form\", {\n        onSubmit: this.handleSubmit,\n        onChange: this.handleChange,\n        __source: {\n          fileName: _jsxFileName,\n          lineNumber: 41\n        },\n        __self: this\n      }, React.createElement(\"h4\", {\n        __source: {\n          fileName: _jsxFileName,\n          lineNumber: 42\n        },\n        __self: this\n      }, \"Test\"), React.createElement(\"div\", {\n        id: \"field-list\",\n        __source: {\n          fileName: _jsxFileName,\n          lineNumber: 43\n        },\n        __self: this\n      }, this.state.inputs.map(function (value, idx) {\n        return React.createElement(\"div\", {\n          className: \"form-fields\",\n          key: idx,\n          __source: {\n            fileName: _jsxFileName,\n            lineNumber: 47\n          },\n          __self: this\n        }, React.createElement(\"label\", {\n          __source: {\n            fileName: _jsxFileName,\n            lineNumber: 48\n          },\n          __self: this\n        }, \"test attribute\"), React.createElement(\"input\", {\n          type: \"text\",\n          className: \"input\",\n          \"data-id\": idx,\n          defaultValue: value,\n          onKeyDown: _this2.handleInputTyping,\n          __source: {\n            fileName: _jsxFileName,\n            lineNumber: 49\n          },\n          __self: this\n        }), value ? React.createElement(\"button\", {\n          __source: {\n            fileName: _jsxFileName,\n            lineNumber: 50\n          },\n          __self: this\n        }, \"X\") : \"\");\n      })), React.createElement(\"button\", {\n        __source: {\n          fileName: _jsxFileName,\n          lineNumber: 56\n        },\n        __self: this\n      }, \"Cancel\"), React.createElement(\"button\", {\n        __source: {\n          fileName: _jsxFileName,\n          lineNumber: 57\n        },\n        __self: this\n      }, \"Save\"));\n    }\n  }]);\n\n  return MultiInput;\n}(Component);\n\nexport { MultiInput as default };\nMultiInput.propTypes = {\n  inputs: PropTypes.array\n};","map":{"version":3,"sources":["/home/jvidal/Projects/multiple-inputs/src/components/MultiInput/MultiInput.jsx"],"names":["React","Component","PropTypes","MultiInput","props","handleSubmit","e","preventDefault","handleChange","inputs","state","target","dataset","id","value","setState","console","log","handleInputTyping","index","length","prevState","removeInput","push","map","idx","propTypes","array"],"mappings":"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","sourcesContent":["import React, { Component } from 'react';\nimport PropTypes from 'prop-types';\n\nexport default class MultiInput extends Component {\n    \n    constructor(props) {\n        super(props);\n\n        if(props.inputs.length === 0) { props.inputs.push(\"\") }\n\n        this.state = {\n            inputs: props.inputs,\n        };\n    }\n\n    handleSubmit = (e) => { e.preventDefault() }\n\n    handleChange = (e) => {\n        let inputs = [...this.state.inputs];\n        inputs[e.target.dataset.id] = e.target.value;\n        this.setState({inputs}, console.log(this.state.inputs));\n    }\n\n    handleInputTyping = (e) => {\n        \n        let index = e.target.dataset.id === 0 ? 1 : e.target.dataset.id;\n\n        if(this.state.inputs.length <= index) {\n            this.setState((prevState) => ({\n                inputs: [...prevState.inputs, \"\"]\n            }));\n        }\n    }\n\n    removeInput = (e) => {\n       \n    }\n\n    render() {\n        return (\n            <form onSubmit={this.handleSubmit} onChange={this.handleChange}>\n                <h4>Test</h4>\n                <div id=\"field-list\">\n                {\n                    this.state.inputs.map((value, idx) => {\n                        return(\n                            <div className=\"form-fields\" key={idx}>\n                                <label>test attribute</label>\n                                <input type=\"text\" className=\"input\" data-id={idx} defaultValue={value} onKeyDown={this.handleInputTyping} />\n                                { value ? (<button>X</button>) : \"\" }\n                            </div>\n                            )\n                        })\n                    }\n                </div>\n                <button>Cancel</button>\n                <button>Save</button>\n            </form>\n        );\n    }\n}\n\nMultiInput.propTypes = {\n    inputs: PropTypes.array,\n}"]},"metadata":{},"sourceType":"module"}