{"ast":null,"code":"import _toConsumableArray from \"/home/jvidal/Projects/multiple-inputs/node_modules/@babel/runtime/helpers/esm/toConsumableArray\";\nimport _classCallCheck from \"/home/jvidal/Projects/multiple-inputs/node_modules/@babel/runtime/helpers/esm/classCallCheck\";\nimport _createClass from \"/home/jvidal/Projects/multiple-inputs/node_modules/@babel/runtime/helpers/esm/createClass\";\nimport _possibleConstructorReturn from \"/home/jvidal/Projects/multiple-inputs/node_modules/@babel/runtime/helpers/esm/possibleConstructorReturn\";\nimport _getPrototypeOf from \"/home/jvidal/Projects/multiple-inputs/node_modules/@babel/runtime/helpers/esm/getPrototypeOf\";\nimport _inherits from \"/home/jvidal/Projects/multiple-inputs/node_modules/@babel/runtime/helpers/esm/inherits\";\nimport _assertThisInitialized from \"/home/jvidal/Projects/multiple-inputs/node_modules/@babel/runtime/helpers/esm/assertThisInitialized\";\nvar _jsxFileName = \"/home/jvidal/Projects/multiple-inputs/src/components/MultiInput/MultiInput.jsx\";\nimport React, { Component } from 'react';\n\nvar MultiInput =\n/*#__PURE__*/\nfunction (_Component) {\n  _inherits(MultiInput, _Component);\n\n  function MultiInput() {\n    var _this;\n\n    _classCallCheck(this, MultiInput);\n\n    _this = _possibleConstructorReturn(this, _getPrototypeOf(MultiInput).call(this));\n\n    _this.handleChange = function (e) {};\n\n    _this.handleSubmit = function (e) {\n      e.preventDefault();\n    };\n\n    _this.handleInputTyping = function (e) {\n      var index = parseInt(e.target.getAttribute(\"data-id\"));\n\n      if (_this.state.inputs.length <= index) {\n        _this.setState(function (prevState) {\n          return {\n            inputs: _toConsumableArray(prevState.inputs).concat([\"\"])\n          };\n        });\n      }\n    };\n\n    _this.removeInput = function (e) {\n      var index = parseInt(e.target.getAttribute(\"data-id\"));\n\n      if (_this.state.inputs.indexOf(index) >= -1) {\n        _assertThisInitialized(_assertThisInitialized(_this));\n      }\n\n      console.log(_this.state.inputs);\n    };\n\n    _this.state = {\n      inputs: []\n    };\n    return _this;\n  }\n\n  _createClass(MultiInput, [{\n    key: \"render\",\n    value: function render() {\n      var _this2 = this;\n\n      return React.createElement(\"form\", {\n        onSubmit: this.handleSubmit,\n        onChange: this.handleChange,\n        __source: {\n          fileName: _jsxFileName,\n          lineNumber: 42\n        },\n        __self: this\n      }, React.createElement(\"h4\", {\n        __source: {\n          fileName: _jsxFileName,\n          lineNumber: 43\n        },\n        __self: this\n      }, \"Test\"), this.state.inputs.map(function (value, idx) {\n        idx += 1;\n        return React.createElement(\"div\", {\n          className: \"form-fields\",\n          key: idx,\n          __source: {\n            fileName: _jsxFileName,\n            lineNumber: 50\n          },\n          __self: this\n        }, React.createElement(\"label\", {\n          __source: {\n            fileName: _jsxFileName,\n            lineNumber: 51\n          },\n          __self: this\n        }, \"test attribute\"), React.createElement(\"input\", {\n          type: \"text\",\n          className: \"input\",\n          \"data-id\": idx,\n          onKeyDown: _this2.handleInputTyping,\n          __source: {\n            fileName: _jsxFileName,\n            lineNumber: 52\n          },\n          __self: this\n        }), React.createElement(\"button\", {\n          onClick: _this2.removeInput,\n          __source: {\n            fileName: _jsxFileName,\n            lineNumber: 53\n          },\n          __self: this\n        }, \"X\"));\n      }), React.createElement(\"div\", {\n        className: \"form-fields\",\n        __source: {\n          fileName: _jsxFileName,\n          lineNumber: 58\n        },\n        __self: this\n      }, React.createElement(\"label\", {\n        __source: {\n          fileName: _jsxFileName,\n          lineNumber: 59\n        },\n        __self: this\n      }, \"test attribute\"), React.createElement(\"input\", {\n        type: \"text\",\n        className: \"input\",\n        \"data-id\": \"0\",\n        onKeyUp: this.handleInputTyping,\n        __source: {\n          fileName: _jsxFileName,\n          lineNumber: 60\n        },\n        __self: this\n      })));\n    }\n  }]);\n\n  return MultiInput;\n}(Component);\n\nexport default MultiInput;","map":{"version":3,"sources":["/home/jvidal/Projects/multiple-inputs/src/components/MultiInput/MultiInput.jsx"],"names":["React","Component","MultiInput","handleChange","e","handleSubmit","preventDefault","handleInputTyping","index","parseInt","target","getAttribute","state","inputs","length","setState","prevState","removeInput","indexOf","console","log","map","value","idx"],"mappings":";;;;;;;;AAAA,OAAOA,KAAP,IAAgBC,SAAhB,QAAiC,OAAjC;;IAEMC,U;;;;;AAEF,wBAAc;AAAA;;AAAA;;AACV;;AADU,UAQdC,YARc,GAQC,UAACC,CAAD,EAAO,CAErB,CAVa;;AAAA,UAYdC,YAZc,GAYC,UAACD,CAAD,EAAO;AAAEA,MAAAA,CAAC,CAACE,cAAF;AAAoB,KAZ9B;;AAAA,UAcdC,iBAdc,GAcM,UAACH,CAAD,EAAO;AAEvB,UAAII,KAAK,GAAGC,QAAQ,CAACL,CAAC,CAACM,MAAF,CAASC,YAAT,CAAsB,SAAtB,CAAD,CAApB;;AAEA,UAAG,MAAKC,KAAL,CAAWC,MAAX,CAAkBC,MAAlB,IAA4BN,KAA/B,EAAsC;AAClC,cAAKO,QAAL,CAAc,UAACC,SAAD;AAAA,iBAAgB;AAC1BH,YAAAA,MAAM,qBAAMG,SAAS,CAACH,MAAhB,UAAwB,EAAxB;AADoB,WAAhB;AAAA,SAAd;AAGH;AACJ,KAvBa;;AAAA,UAyBdI,WAzBc,GAyBA,UAACb,CAAD,EAAO;AACjB,UAAII,KAAK,GAAGC,QAAQ,CAACL,CAAC,CAACM,MAAF,CAASC,YAAT,CAAsB,SAAtB,CAAD,CAApB;;AAEA,UAAG,MAAKC,KAAL,CAAWC,MAAX,CAAkBK,OAAlB,CAA0BV,KAA1B,KAAoC,CAAC,CAAxC,EAA2C;AACvC;AACH;;AAEDW,MAAAA,OAAO,CAACC,GAAR,CAAY,MAAKR,KAAL,CAAWC,MAAvB;AACH,KAjCa;;AAGV,UAAKD,KAAL,GAAa;AACTC,MAAAA,MAAM,EAAE;AADC,KAAb;AAHU;AAMb;;;;6BA6BQ;AAAA;;AACL,aACI;AAAM,QAAA,QAAQ,EAAE,KAAKR,YAArB;AAAmC,QAAA,QAAQ,EAAE,KAAKF,YAAlD;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA,SACI;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA,gBADJ,EAGQ,KAAKS,KAAL,CAAWC,MAAX,CAAkBQ,GAAlB,CAAsB,UAACC,KAAD,EAAQC,GAAR,EAAgB;AAElCA,QAAAA,GAAG,IAAI,CAAP;AAEA,eACI;AAAK,UAAA,SAAS,EAAC,aAAf;AAA6B,UAAA,GAAG,EAAEA,GAAlC;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA,WACI;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA,4BADJ,EAEI;AAAO,UAAA,IAAI,EAAC,MAAZ;AAAmB,UAAA,SAAS,EAAC,OAA7B;AAAqC,qBAASA,GAA9C;AAAmD,UAAA,SAAS,EAAE,MAAI,CAAChB,iBAAnE;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA,UAFJ,EAGI;AAAQ,UAAA,OAAO,EAAE,MAAI,CAACU,WAAtB;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA,eAHJ,CADJ;AAOH,OAXD,CAHR,EAgBI;AAAK,QAAA,SAAS,EAAC,aAAf;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA,SACI;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA,0BADJ,EAEI;AAAO,QAAA,IAAI,EAAC,MAAZ;AAAmB,QAAA,SAAS,EAAC,OAA7B;AAAqC,mBAAQ,GAA7C;AAAiD,QAAA,OAAO,EAAE,KAAKV,iBAA/D;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA,QAFJ,CAhBJ,CADJ;AAyBH;;;;EA/DoBN,S;;AAkEzB,eAAeC,UAAf","sourcesContent":["import React, { Component } from 'react';\n\nclass MultiInput extends Component {\n    \n    constructor() {\n        super();\n\n        this.state = {\n            inputs: [],\n        };\n    }\n\n    handleChange = (e) => {\n\n    }\n\n    handleSubmit = (e) => { e.preventDefault() }\n\n    handleInputTyping = (e) => {\n        \n        let index = parseInt(e.target.getAttribute(\"data-id\"));\n\n        if(this.state.inputs.length <= index) {\n            this.setState((prevState) => ({\n                inputs: [...prevState.inputs, \"\"]\n            }));\n        }\n    }\n\n    removeInput = (e) => {\n        let index = parseInt(e.target.getAttribute(\"data-id\"));\n\n        if(this.state.inputs.indexOf(index) >= -1) {\n            this\n        }\n\n        console.log(this.state.inputs);\n    }\n\n    render() {\n        return (\n            <form onSubmit={this.handleSubmit} onChange={this.handleChange}>\n                <h4>Test</h4> \n                {\n                    this.state.inputs.map((value, idx) => {\n                        \n                        idx += 1;\n\n                        return(\n                            <div className=\"form-fields\" key={idx}>\n                                <label>test attribute</label>\n                                <input type=\"text\" className=\"input\" data-id={idx} onKeyDown={this.handleInputTyping} />\n                                <button onClick={this.removeInput}>X</button>\n                            </div>\n                        )\n                    })\n                }\n                <div className=\"form-fields\">\n                    <label>test attribute</label>\n                    <input type=\"text\" className=\"input\" data-id=\"0\" onKeyUp={this.handleInputTyping} />\n                </div>\n               \n                \n            </form>\n        );\n    }\n}\n\nexport default MultiInput;"]},"metadata":{},"sourceType":"module"}