{"ast":null,"code":"import _toConsumableArray from \"/home/jvidal/Projects/multiple-inputs/node_modules/@babel/runtime/helpers/esm/toConsumableArray\";\nimport _classCallCheck from \"/home/jvidal/Projects/multiple-inputs/node_modules/@babel/runtime/helpers/esm/classCallCheck\";\nimport _createClass from \"/home/jvidal/Projects/multiple-inputs/node_modules/@babel/runtime/helpers/esm/createClass\";\nimport _possibleConstructorReturn from \"/home/jvidal/Projects/multiple-inputs/node_modules/@babel/runtime/helpers/esm/possibleConstructorReturn\";\nimport _getPrototypeOf from \"/home/jvidal/Projects/multiple-inputs/node_modules/@babel/runtime/helpers/esm/getPrototypeOf\";\nimport _inherits from \"/home/jvidal/Projects/multiple-inputs/node_modules/@babel/runtime/helpers/esm/inherits\";\nvar _jsxFileName = \"/home/jvidal/Projects/multiple-inputs/src/components/MultiInput/MultiInput.jsx\";\nimport React, { Component } from 'react';\nimport PropTypes from 'prop-types';\n\nvar MultiInput =\n/*#__PURE__*/\nfunction (_Component) {\n  _inherits(MultiInput, _Component);\n\n  function MultiInput(props) {\n    var _this;\n\n    _classCallCheck(this, MultiInput);\n\n    _this = _possibleConstructorReturn(this, _getPrototypeOf(MultiInput).call(this, props)); //even if the argument is an empty array, forces it to render the forms\n\n    _this.handleSubmit = function (e) {\n      e.preventDefault();\n    };\n\n    _this.handleChange = function (e) {\n      var inputs = _toConsumableArray(_this.props.inputs);\n\n      inputs[e.target.dataset.id] = e.target.value;\n      _this.props = {\n        inputs: inputs\n      };\n      console.log(_this.props.inputs);\n    };\n\n    _this.handleInputTyping = function (e) {\n      var index = e.target.dataset.id;\n\n      if (_this.props.inputs.length <= index) {\n        _this.props.inputs = _toConsumableArray(_this.props.inputs).concat([\"\"]);\n      }\n    };\n\n    if (_this.props.inputs.length == 0) {\n      _this.props.inputs.push(\"\");\n    }\n\n    ;\n    return _this;\n  }\n\n  _createClass(MultiInput, [{\n    key: \"render\",\n    value: function render() {\n      var _this2 = this;\n\n      return React.createElement(\"form\", {\n        onSubmit: this.handleSubmit,\n        onChange: this.handleChange,\n        __source: {\n          fileName: _jsxFileName,\n          lineNumber: 37\n        },\n        __self: this\n      }, React.createElement(\"h4\", {\n        __source: {\n          fileName: _jsxFileName,\n          lineNumber: 38\n        },\n        __self: this\n      }, \"Test\"), React.createElement(\"div\", {\n        id: \"field-list\",\n        __source: {\n          fileName: _jsxFileName,\n          lineNumber: 39\n        },\n        __self: this\n      }, this.props.inputs.map(function (value, idx) {\n        return React.createElement(\"div\", {\n          className: \"form-fields\",\n          key: idx,\n          __source: {\n            fileName: _jsxFileName,\n            lineNumber: 43\n          },\n          __self: this\n        }, React.createElement(\"label\", {\n          __source: {\n            fileName: _jsxFileName,\n            lineNumber: 44\n          },\n          __self: this\n        }, \"test attribute\"), React.createElement(\"input\", {\n          type: \"text\",\n          className: \"input\",\n          \"data-id\": idx,\n          defaultValue: _this2.props.inputs[idx],\n          onKeyDown: _this2.handleInputTyping,\n          __source: {\n            fileName: _jsxFileName,\n            lineNumber: 45\n          },\n          __self: this\n        }), value ? React.createElement(\"button\", {\n          className: \"exclude-button-invisible\",\n          onClick: _this2.removeInput,\n          __source: {\n            fileName: _jsxFileName,\n            lineNumber: 46\n          },\n          __self: this\n        }, \"X\") : \"\");\n      })), React.createElement(\"button\", {\n        __source: {\n          fileName: _jsxFileName,\n          lineNumber: 52\n        },\n        __self: this\n      }, \"Cancel\"), React.createElement(\"button\", {\n        __source: {\n          fileName: _jsxFileName,\n          lineNumber: 53\n        },\n        __self: this\n      }, \"Save\"));\n    }\n  }]);\n\n  return MultiInput;\n}(Component);\n\nexport { MultiInput as default };\nMultiInput.propTypes = {\n  inputs: PropTypes.array.isRequired\n};","map":{"version":3,"sources":["/home/jvidal/Projects/multiple-inputs/src/components/MultiInput/MultiInput.jsx"],"names":["React","Component","PropTypes","MultiInput","props","handleSubmit","e","preventDefault","handleChange","inputs","target","dataset","id","value","console","log","handleInputTyping","index","length","push","map","idx","removeInput","propTypes","array","isRequired"],"mappings":";;;;;;;AAAA,OAAOA,KAAP,IAAgBC,SAAhB,QAAiC,OAAjC;AACA,OAAOC,SAAP,MAAsB,YAAtB;;IAEqBC,U;;;;;AAEjB,sBAAYC,KAAZ,EAAmB;AAAA;;AAAA;;AACf,oFAAMA,KAAN,GADe,CAGf;;AAHe,UAOnBC,YAPmB,GAOJ,UAACC,CAAD,EAAO;AAAEA,MAAAA,CAAC,CAACC,cAAF;AAAoB,KAPzB;;AAAA,UASnBC,YATmB,GASJ,UAACF,CAAD,EAAO;AAClB,UAAIG,MAAM,sBAAO,MAAKL,KAAL,CAAWK,MAAlB,CAAV;;AAEAA,MAAAA,MAAM,CAACH,CAAC,CAACI,MAAF,CAASC,OAAT,CAAiBC,EAAlB,CAAN,GAA8BN,CAAC,CAACI,MAAF,CAASG,KAAvC;AAEA,YAAKT,KAAL,GAAa;AAACK,QAAAA,MAAM,EAANA;AAAD,OAAb;AAEAK,MAAAA,OAAO,CAACC,GAAR,CAAY,MAAKX,KAAL,CAAWK,MAAvB;AACH,KAjBkB;;AAAA,UAmBnBO,iBAnBmB,GAmBC,UAACV,CAAD,EAAO;AAEvB,UAAIW,KAAK,GAAGX,CAAC,CAACI,MAAF,CAASC,OAAT,CAAiBC,EAA7B;;AAEA,UAAG,MAAKR,KAAL,CAAWK,MAAX,CAAkBS,MAAlB,IAA4BD,KAA/B,EAAsC;AAClC,cAAKb,KAAL,CAAWK,MAAX,sBAAwB,MAAKL,KAAL,CAAWK,MAAnC,UAA2C,EAA3C;AACH;AACJ,KA1BkB;;AAIf,QAAG,MAAKL,KAAL,CAAWK,MAAX,CAAkBS,MAAlB,IAA4B,CAA/B,EAAkC;AAAE,YAAKd,KAAL,CAAWK,MAAX,CAAkBU,IAAlB,CAAuB,EAAvB;AAA4B;;AAAA;AAJjD;AAKlB;;;;6BAuBQ;AAAA;;AAEL,aACI;AAAM,QAAA,QAAQ,EAAE,KAAKd,YAArB;AAAmC,QAAA,QAAQ,EAAE,KAAKG,YAAlD;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA,SACI;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA,gBADJ,EAEI;AAAK,QAAA,EAAE,EAAC,YAAR;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA,SAEI,KAAKJ,KAAL,CAAWK,MAAX,CAAkBW,GAAlB,CAAsB,UAACP,KAAD,EAAQQ,GAAR,EAAgB;AAClC,eACI;AAAK,UAAA,SAAS,EAAC,aAAf;AAA6B,UAAA,GAAG,EAAEA,GAAlC;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA,WACI;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA,4BADJ,EAEI;AAAO,UAAA,IAAI,EAAC,MAAZ;AAAmB,UAAA,SAAS,EAAC,OAA7B;AAAqC,qBAASA,GAA9C;AAAmD,UAAA,YAAY,EAAE,MAAI,CAACjB,KAAL,CAAWK,MAAX,CAAkBY,GAAlB,CAAjE;AAAyF,UAAA,SAAS,EAAE,MAAI,CAACL,iBAAzG;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA,UAFJ,EAGMH,KAAK,GAAI;AAAQ,UAAA,SAAS,EAAC,0BAAlB;AAA6C,UAAA,OAAO,EAAE,MAAI,CAACS,WAA3D;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA,eAAJ,GAA0F,EAHrG,CADJ;AAOC,OARL,CAFJ,CAFJ,EAeI;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA,kBAfJ,EAgBI;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA,gBAhBJ,CADJ;AAoBH;;;;EApDmCrB,S;;SAAnBE,U;AAuDrBA,UAAU,CAACoB,SAAX,GAAuB;AACnBd,EAAAA,MAAM,EAAEP,SAAS,CAACsB,KAAV,CAAgBC;AADL,CAAvB","sourcesContent":["import React, { Component } from 'react';\nimport PropTypes from 'prop-types'\n\nexport default class MultiInput extends Component {\n    \n    constructor(props) {\n        super(props);\n\n        //even if the argument is an empty array, forces it to render the forms\n        if(this.props.inputs.length == 0) { this.props.inputs.push(\"\") };\n    }\n\n    handleSubmit = (e) => { e.preventDefault() }\n\n    handleChange = (e) => {\n        let inputs = [...this.props.inputs];\n        \n        inputs[e.target.dataset.id] = e.target.value;\n        \n        this.props = {inputs};\n        \n        console.log(this.props.inputs);\n    }\n\n    handleInputTyping = (e) => {\n        \n        let index = e.target.dataset.id;\n\n        if(this.props.inputs.length <= index) {\n            this.props.inputs = [...this.props.inputs, \"\"];\n        }\n    }\n\n    render() {\n        \n        return (\n            <form onSubmit={this.handleSubmit} onChange={this.handleChange}>\n                <h4>Test</h4>\n                <div id=\"field-list\">\n                {\n                    this.props.inputs.map((value, idx) => {\n                        return(\n                            <div className=\"form-fields\" key={idx}>\n                                <label>test attribute</label>\n                                <input type=\"text\" className=\"input\" data-id={idx} defaultValue={this.props.inputs[idx]} onKeyDown={this.handleInputTyping} />\n                                { value ? (<button className=\"exclude-button-invisible\" onClick={this.removeInput}>X</button>) : \"\" }\n                            </div>\n                            )\n                        })\n                }\n                </div>\n                <button>Cancel</button>\n                <button>Save</button>\n            </form>\n        );\n    }\n}\n\nMultiInput.propTypes = {\n    inputs: PropTypes.array.isRequired,\n}"]},"metadata":{},"sourceType":"module"}