{"ast":null,"code":"import _toConsumableArray from \"/home/jvidal/Projects/multiple-inputs/node_modules/@babel/runtime/helpers/esm/toConsumableArray\";\nimport _classCallCheck from \"/home/jvidal/Projects/multiple-inputs/node_modules/@babel/runtime/helpers/esm/classCallCheck\";\nimport _createClass from \"/home/jvidal/Projects/multiple-inputs/node_modules/@babel/runtime/helpers/esm/createClass\";\nimport _possibleConstructorReturn from \"/home/jvidal/Projects/multiple-inputs/node_modules/@babel/runtime/helpers/esm/possibleConstructorReturn\";\nimport _getPrototypeOf from \"/home/jvidal/Projects/multiple-inputs/node_modules/@babel/runtime/helpers/esm/getPrototypeOf\";\nimport _inherits from \"/home/jvidal/Projects/multiple-inputs/node_modules/@babel/runtime/helpers/esm/inherits\";\nvar _jsxFileName = \"/home/jvidal/Projects/multiple-inputs/src/components/MultiInput/MultiInput.jsx\";\nimport React, { Component } from 'react';\nimport SingleInput from './SingleInput';\n\nvar MultiInput =\n/*#__PURE__*/\nfunction (_Component) {\n  _inherits(MultiInput, _Component);\n\n  function MultiInput() {\n    var _this;\n\n    _classCallCheck(this, MultiInput);\n\n    _this = _possibleConstructorReturn(this, _getPrototypeOf(MultiInput).call(this));\n\n    _this.handleChange = function (e) {};\n\n    _this.handleSubmit = function (e) {\n      e.preventDefault();\n    };\n\n    _this.handleInputTyping = function (e) {\n      var index = parseInt(e.target.getAttribute(\"data-id\"));\n      var value = e.target.value;\n\n      if (_this.state.inputs.length <= index) {\n        _this.setState(function (prevState) {\n          return {\n            inputs: _toConsumableArray(prevState.inputs).concat([value])\n          };\n        });\n      } else {\n        setTimeout(function () {\n          _this.state.inputs[index] = value;\n        }, 5000);\n      }\n    };\n\n    _this.removeInput = function (e) {\n      var index = parseInt(e.target.getAttribute(\"data-id\"));\n\n      if (_this.state.inputs.indexOf(index) >= -1) {\n        _this.setState({\n          inputs: _this.state.inputs.splice(index, 1)\n        });\n      }\n\n      console.log(_this.state.inputs);\n    };\n\n    _this.state = {\n      inputs: []\n    };\n    return _this;\n  }\n\n  _createClass(MultiInput, [{\n    key: \"render\",\n    value: function render() {\n      return React.createElement(\"form\", {\n        onSubmit: this.handleSubmit,\n        onChange: this.handleChange,\n        __source: {\n          fileName: _jsxFileName,\n          lineNumber: 51\n        },\n        __self: this\n      }, React.createElement(\"h4\", {\n        __source: {\n          fileName: _jsxFileName,\n          lineNumber: 52\n        },\n        __self: this\n      }, \"Test\"), React.createElement(\"div\", {\n        className: \"form-fields\",\n        __source: {\n          fileName: _jsxFileName,\n          lineNumber: 53\n        },\n        __self: this\n      }, React.createElement(\"label\", {\n        __source: {\n          fileName: _jsxFileName,\n          lineNumber: 54\n        },\n        __self: this\n      }, \"test attribute\"), React.createElement(\"input\", {\n        type: \"text\",\n        className: \"input\",\n        \"data-id\": \"0\",\n        onKeyUp: this.handleInputTyping,\n        __source: {\n          fileName: _jsxFileName,\n          lineNumber: 55\n        },\n        __self: this\n      })));\n    }\n  }]);\n\n  return MultiInput;\n}(Component);\n\nexport default MultiInput;","map":{"version":3,"sources":["/home/jvidal/Projects/multiple-inputs/src/components/MultiInput/MultiInput.jsx"],"names":["React","Component","SingleInput","MultiInput","handleChange","e","handleSubmit","preventDefault","handleInputTyping","index","parseInt","target","getAttribute","value","state","inputs","length","setState","prevState","setTimeout","removeInput","indexOf","splice","console","log"],"mappings":";;;;;;;AAAA,OAAOA,KAAP,IAAgBC,SAAhB,QAAiC,OAAjC;AACA,OAAOC,WAAP,MAAwB,eAAxB;;IAEMC,U;;;;;AAEF,wBAAc;AAAA;;AAAA;;AACV;;AADU,UAQdC,YARc,GAQC,UAACC,CAAD,EAAO,CAErB,CAVa;;AAAA,UAYdC,YAZc,GAYC,UAACD,CAAD,EAAO;AAAEA,MAAAA,CAAC,CAACE,cAAF;AAAoB,KAZ9B;;AAAA,UAcdC,iBAdc,GAcM,UAACH,CAAD,EAAO;AAEvB,UAAII,KAAK,GAAGC,QAAQ,CAACL,CAAC,CAACM,MAAF,CAASC,YAAT,CAAsB,SAAtB,CAAD,CAApB;AACA,UAAIC,KAAK,GAAGR,CAAC,CAACM,MAAF,CAASE,KAArB;;AAEA,UAAG,MAAKC,KAAL,CAAWC,MAAX,CAAkBC,MAAlB,IAA4BP,KAA/B,EAAsC;AAClC,cAAKQ,QAAL,CAAc,UAACC,SAAD;AAAA,iBAAgB;AAC1BH,YAAAA,MAAM,qBAAMG,SAAS,CAACH,MAAhB,UAAwBF,KAAxB;AADoB,WAAhB;AAAA,SAAd;AAGH,OAJD,MAIO;AACHM,QAAAA,UAAU,CAAC,YAAM;AACb,gBAAKL,KAAL,CAAWC,MAAX,CAAkBN,KAAlB,IAA2BI,KAA3B;AACH,SAFS,EAEP,IAFO,CAAV;AAGH;AAEJ,KA7Ba;;AAAA,UA+BdO,WA/Bc,GA+BA,UAACf,CAAD,EAAO;AACjB,UAAII,KAAK,GAAGC,QAAQ,CAACL,CAAC,CAACM,MAAF,CAASC,YAAT,CAAsB,SAAtB,CAAD,CAApB;;AAEA,UAAG,MAAKE,KAAL,CAAWC,MAAX,CAAkBM,OAAlB,CAA0BZ,KAA1B,KAAoC,CAAC,CAAxC,EAA2C;AACvC,cAAKQ,QAAL,CAAc;AACVF,UAAAA,MAAM,EAAE,MAAKD,KAAL,CAAWC,MAAX,CAAkBO,MAAlB,CAAyBb,KAAzB,EAAgC,CAAhC;AADE,SAAd;AAGH;;AAEDc,MAAAA,OAAO,CAACC,GAAR,CAAY,MAAKV,KAAL,CAAWC,MAAvB;AACH,KAzCa;;AAGV,UAAKD,KAAL,GAAa;AACTC,MAAAA,MAAM,EAAE;AADC,KAAb;AAHU;AAMb;;;;6BAqCQ;AACL,aACI;AAAM,QAAA,QAAQ,EAAE,KAAKT,YAArB;AAAmC,QAAA,QAAQ,EAAE,KAAKF,YAAlD;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA,SACI;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA,gBADJ,EAEI;AAAK,QAAA,SAAS,EAAC,aAAf;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA,SACI;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA,0BADJ,EAEI;AAAO,QAAA,IAAI,EAAC,MAAZ;AAAmB,QAAA,SAAS,EAAC,OAA7B;AAAqC,mBAAQ,GAA7C;AAAiD,QAAA,OAAO,EAAE,KAAKI,iBAA/D;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA,QAFJ,CAFJ,CADJ;AAWH;;;;EAzDoBP,S;;AA4DzB,eAAeE,UAAf","sourcesContent":["import React, { Component } from 'react';\nimport SingleInput from './SingleInput';\n\nclass MultiInput extends Component {\n    \n    constructor() {\n        super();\n\n        this.state = {\n            inputs: [],\n        };\n    }\n\n    handleChange = (e) => {\n\n    }\n\n    handleSubmit = (e) => { e.preventDefault() }\n\n    handleInputTyping = (e) => {\n        \n        let index = parseInt(e.target.getAttribute(\"data-id\"));\n        let value = e.target.value;\n\n        if(this.state.inputs.length <= index) {\n            this.setState((prevState) => ({\n                inputs: [...prevState.inputs, value]\n            }));\n        } else {\n            setTimeout(() => {\n                this.state.inputs[index] = value;\n            }, 5000);\n        }\n\n    }\n\n    removeInput = (e) => {\n        let index = parseInt(e.target.getAttribute(\"data-id\"));\n\n        if(this.state.inputs.indexOf(index) >= -1) {\n            this.setState({\n                inputs: this.state.inputs.splice(index, 1)\n            });\n        }\n\n        console.log(this.state.inputs);\n    }\n\n    render() {\n        return (\n            <form onSubmit={this.handleSubmit} onChange={this.handleChange}>\n                <h4>Test</h4>\n                <div className=\"form-fields\">\n                    <label>test attribute</label>\n                    <input type=\"text\" className=\"input\" data-id=\"0\" onKeyUp={this.handleInputTyping} />\n                </div>\n                \n                \n            </form>\n        );\n    }\n}\n\nexport default MultiInput;"]},"metadata":{},"sourceType":"module"}