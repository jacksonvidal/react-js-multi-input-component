{"ast":null,"code":"import _toConsumableArray from \"/home/jvidal/Projects/multiple-inputs/node_modules/@babel/runtime/helpers/esm/toConsumableArray\";\nimport _classCallCheck from \"/home/jvidal/Projects/multiple-inputs/node_modules/@babel/runtime/helpers/esm/classCallCheck\";\nimport _createClass from \"/home/jvidal/Projects/multiple-inputs/node_modules/@babel/runtime/helpers/esm/createClass\";\nimport _possibleConstructorReturn from \"/home/jvidal/Projects/multiple-inputs/node_modules/@babel/runtime/helpers/esm/possibleConstructorReturn\";\nimport _getPrototypeOf from \"/home/jvidal/Projects/multiple-inputs/node_modules/@babel/runtime/helpers/esm/getPrototypeOf\";\nimport _inherits from \"/home/jvidal/Projects/multiple-inputs/node_modules/@babel/runtime/helpers/esm/inherits\";\nvar _jsxFileName = \"/home/jvidal/Projects/multiple-inputs/src/components/MultiInput/MultiInput.jsx\";\nimport React, { Component } from 'react';\n\nvar MultiInput =\n/*#__PURE__*/\nfunction (_Component) {\n  _inherits(MultiInput, _Component);\n\n  function MultiInput() {\n    var _this;\n\n    _classCallCheck(this, MultiInput);\n\n    _this = _possibleConstructorReturn(this, _getPrototypeOf(MultiInput).call(this));\n\n    _this.handleSubmit = function (e) {\n      e.preventDefault();\n    };\n\n    _this.handleChange = function (e) {\n      var inputs = _toConsumableArray(_this.state.inputs);\n\n      inputs[e.target.dataset.id] = e.target.value;\n\n      _this.setState({\n        inputs: inputs\n      });\n    };\n\n    _this.handleInputTyping = function (e) {\n      var index = parseInt(e.target.getAttribute(\"data-id\"));\n      var value = e.target.value;\n      console.log(index);\n\n      if (index === NaN) {\n        _this.setState(function (prevState) {\n          return {\n            inputs: [\"\"]\n          };\n        });\n      }\n\n      if (_this.state.inputs.length <= index) {\n        _this.setState(function (prevState) {\n          return {\n            inputs: _toConsumableArray(prevState.inputs).concat([value])\n          };\n        });\n      }\n    };\n\n    _this.state = {\n      inputs: []\n    };\n    return _this;\n  }\n\n  _createClass(MultiInput, [{\n    key: \"render\",\n    value: function render() {\n      var _this2 = this;\n\n      return React.createElement(\"form\", {\n        onSubmit: this.handleSubmit,\n        onChange: this.handleChange,\n        __source: {\n          fileName: _jsxFileName,\n          lineNumber: 49\n        },\n        __self: this\n      }, React.createElement(\"h4\", {\n        __source: {\n          fileName: _jsxFileName,\n          lineNumber: 50\n        },\n        __self: this\n      }, \"Test\"), this.state.inputs.map(function (value, idx) {\n        idx += 1;\n        return React.createElement(\"div\", {\n          className: \"form-fields\",\n          key: idx,\n          __source: {\n            fileName: _jsxFileName,\n            lineNumber: 57\n          },\n          __self: this\n        }, React.createElement(\"label\", {\n          __source: {\n            fileName: _jsxFileName,\n            lineNumber: 58\n          },\n          __self: this\n        }, \"test attribute\"), React.createElement(\"input\", {\n          type: \"text\",\n          className: \"input\",\n          \"data-id\": idx,\n          onKeyDown: _this2.handleInputTyping,\n          __source: {\n            fileName: _jsxFileName,\n            lineNumber: 59\n          },\n          __self: this\n        }), React.createElement(\"button\", {\n          onClick: _this2.removeInput,\n          __source: {\n            fileName: _jsxFileName,\n            lineNumber: 60\n          },\n          __self: this\n        }, \"X\"));\n      }), React.createElement(\"div\", {\n        className: \"form-fields\",\n        __source: {\n          fileName: _jsxFileName,\n          lineNumber: 65\n        },\n        __self: this\n      }, React.createElement(\"label\", {\n        __source: {\n          fileName: _jsxFileName,\n          lineNumber: 66\n        },\n        __self: this\n      }, \"test attribute\"), React.createElement(\"input\", {\n        type: \"text\",\n        className: \"first input\",\n        onKeyUp: this.handleInputTyping,\n        __source: {\n          fileName: _jsxFileName,\n          lineNumber: 67\n        },\n        __self: this\n      })));\n    }\n  }]);\n\n  return MultiInput;\n}(Component);\n\nexport default MultiInput;","map":{"version":3,"sources":["/home/jvidal/Projects/multiple-inputs/src/components/MultiInput/MultiInput.jsx"],"names":["React","Component","MultiInput","handleSubmit","e","preventDefault","handleChange","inputs","state","target","dataset","id","value","setState","handleInputTyping","index","parseInt","getAttribute","console","log","NaN","prevState","length","map","idx","removeInput"],"mappings":";;;;;;;AAAA,OAAOA,KAAP,IAAgBC,SAAhB,QAAiC,OAAjC;;IAEMC,U;;;;;AAEF,wBAAc;AAAA;;AAAA;;AACV;;AADU,UAQdC,YARc,GAQC,UAACC,CAAD,EAAO;AAAEA,MAAAA,CAAC,CAACC,cAAF;AAAoB,KAR9B;;AAAA,UAUdC,YAVc,GAUC,UAACF,CAAD,EAAO;AAClB,UAAIG,MAAM,sBAAO,MAAKC,KAAL,CAAWD,MAAlB,CAAV;;AAEAA,MAAAA,MAAM,CAACH,CAAC,CAACK,MAAF,CAASC,OAAT,CAAiBC,EAAlB,CAAN,GAA8BP,CAAC,CAACK,MAAF,CAASG,KAAvC;;AAEA,YAAKC,QAAL,CAAc;AAACN,QAAAA,MAAM,EAANA;AAAD,OAAd;AACH,KAhBa;;AAAA,UAkBdO,iBAlBc,GAkBM,UAACV,CAAD,EAAO;AAEvB,UAAIW,KAAK,GAAGC,QAAQ,CAACZ,CAAC,CAACK,MAAF,CAASQ,YAAT,CAAsB,SAAtB,CAAD,CAApB;AACA,UAAIL,KAAK,GAAGR,CAAC,CAACK,MAAF,CAASG,KAArB;AAGAM,MAAAA,OAAO,CAACC,GAAR,CAAYJ,KAAZ;;AAEA,UAAGA,KAAK,KAAKK,GAAb,EACA;AACI,cAAKP,QAAL,CAAc,UAACQ,SAAD;AAAA,iBAAgB;AAC1Bd,YAAAA,MAAM,EAAE,CAAC,EAAD;AADkB,WAAhB;AAAA,SAAd;AAGH;;AAED,UAAG,MAAKC,KAAL,CAAWD,MAAX,CAAkBe,MAAlB,IAA4BP,KAA/B,EAAsC;AAClC,cAAKF,QAAL,CAAc,UAACQ,SAAD;AAAA,iBAAgB;AAC1Bd,YAAAA,MAAM,qBAAMc,SAAS,CAACd,MAAhB,UAAwBK,KAAxB;AADoB,WAAhB;AAAA,SAAd;AAGH;AAGJ,KAxCa;;AAGV,UAAKJ,KAAL,GAAa;AACTD,MAAAA,MAAM,EAAE;AADC,KAAb;AAHU;AAMb;;;;6BAoCQ;AAAA;;AACL,aACI;AAAM,QAAA,QAAQ,EAAE,KAAKJ,YAArB;AAAmC,QAAA,QAAQ,EAAE,KAAKG,YAAlD;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA,SACI;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA,gBADJ,EAGQ,KAAKE,KAAL,CAAWD,MAAX,CAAkBgB,GAAlB,CAAsB,UAACX,KAAD,EAAQY,GAAR,EAAgB;AAElCA,QAAAA,GAAG,IAAI,CAAP;AAEA,eACI;AAAK,UAAA,SAAS,EAAC,aAAf;AAA6B,UAAA,GAAG,EAAEA,GAAlC;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA,WACI;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA,4BADJ,EAEI;AAAO,UAAA,IAAI,EAAC,MAAZ;AAAmB,UAAA,SAAS,EAAC,OAA7B;AAAqC,qBAASA,GAA9C;AAAmD,UAAA,SAAS,EAAE,MAAI,CAACV,iBAAnE;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA,UAFJ,EAGI;AAAQ,UAAA,OAAO,EAAE,MAAI,CAACW,WAAtB;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA,eAHJ,CADJ;AAOH,OAXD,CAHR,EAgBI;AAAK,QAAA,SAAS,EAAC,aAAf;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA,SACI;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA,0BADJ,EAEI;AAAO,QAAA,IAAI,EAAC,MAAZ;AAAmB,QAAA,SAAS,EAAC,aAA7B;AAA2C,QAAA,OAAO,EAAE,KAAKX,iBAAzD;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA,QAFJ,CAhBJ,CADJ;AAyBH;;;;EAtEoBb,S;;AAyEzB,eAAeC,UAAf","sourcesContent":["import React, { Component } from 'react';\n\nclass MultiInput extends Component {\n    \n    constructor() {\n        super();\n\n        this.state = {\n            inputs: [],\n        };\n    }\n\n    handleSubmit = (e) => { e.preventDefault() }\n\n    handleChange = (e) => {\n        let inputs = [...this.state.inputs];\n\n        inputs[e.target.dataset.id] = e.target.value;\n        \n        this.setState({inputs});\n    }\n\n    handleInputTyping = (e) => {\n        \n        let index = parseInt(e.target.getAttribute(\"data-id\"));\n        let value = e.target.value;\n\n\n        console.log(index);\n\n        if(index === NaN)\n        {\n            this.setState((prevState) => ({\n                inputs: [\"\"]\n            }));\n        }\n\n        if(this.state.inputs.length <= index) {\n            this.setState((prevState) => ({\n                inputs: [...prevState.inputs, value]\n            }));\n        }\n\n        \n    }\n\n    render() {\n        return (\n            <form onSubmit={this.handleSubmit} onChange={this.handleChange}>\n                <h4>Test</h4> \n                {\n                    this.state.inputs.map((value, idx) => {\n                        \n                        idx += 1;\n\n                        return(\n                            <div className=\"form-fields\" key={idx}>\n                                <label>test attribute</label>\n                                <input type=\"text\" className=\"input\" data-id={idx} onKeyDown={this.handleInputTyping} />\n                                <button onClick={this.removeInput}>X</button>\n                            </div>\n                        )\n                    })\n                }\n                <div className=\"form-fields\">\n                    <label>test attribute</label>\n                    <input type=\"text\" className=\"first input\" onKeyUp={this.handleInputTyping} />\n                </div>\n               \n                \n            </form>\n        );\n    }\n}\n\nexport default MultiInput;"]},"metadata":{},"sourceType":"module"}